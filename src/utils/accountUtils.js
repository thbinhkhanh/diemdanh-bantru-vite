// src/utils/accountUtils.js
import { doc, getDoc, writeBatch, deleteField } from "firebase/firestore";

// H√†m t·∫°o t√†i kho·∫£n
export const createClassUserAccounts = async ({
  db,
  password,
  namHoc,
  setActionType,
  setProgress,
  setMessage,
  setSeverity,
}) => {
  if (!password || password.trim() === "") {
    alert("‚ùå Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u h·ª£p l·ªá!");
    return;
  }

  if (!namHoc || namHoc === "UNKNOWN") {
    alert("‚ùå Kh√¥ng c√≥ nƒÉm h·ªçc h·ª£p l·ªá!");
    return;
  }

  try {
    setActionType("create");
    setProgress(0);

    const truongRef = doc(db, `CLASSLIST_${namHoc}`, "TRUONG");
    const truongSnap = await getDoc(truongRef);

    if (!truongSnap.exists()) {
      setMessage("‚ùå Kh√¥ng t√¨m th·∫•y document TRUONG.");
      setSeverity("error");
      return;
    }

    const classList = truongSnap.data().list;
    if (!Array.isArray(classList)) {
      setMessage("‚ùå D·ªØ li·ªáu list kh√¥ng h·ª£p l·ªá.");
      setSeverity("error");
      return;
    }

    const newAccounts = [];
    let skipCount = 0;

    for (let i = 0; i < classList.length; i++) {
      const className = classList[i];
      const accountRef = doc(db, "ACCOUNT", className);
      const accountSnap = await getDoc(accountRef);
      if (!accountSnap.exists()) {
        newAccounts.push(className);
      } else {
        skipCount++;
      }
      setProgress(Math.round(((i + 1) / classList.length) * 100));
    }

    const BATCH_LIMIT = 500;
    let successCount = 0;

    for (let i = 0; i < newAccounts.length; i += BATCH_LIMIT) {
      const batch = writeBatch(db);
      const chunk = newAccounts.slice(i, i + BATCH_LIMIT);

      chunk.forEach(className => {
        const ref = doc(db, "ACCOUNT", className);
        const khoiSo = className.split(".")[0]; // "2.3" -> "2"
        const khoi = `K${khoiSo}`;              // -> "K2"

        batch.set(ref, {
          username: className,
          password: password,
          hoTen: "",
          khoi: khoi,
        });
      });

      try {
        await batch.commit();
        successCount += chunk.length;
      } catch (err) {
        console.error("‚ùå L·ªói khi ghi batch:", err);
      }

      const progressDone = classList.length + i + chunk.length;
      const totalSteps = classList.length + newAccounts.length;
      setProgress(Math.min(100, Math.round((progressDone / totalSteps) * 100)));
    }

    setMessage(`‚úÖ ƒê√£ t·∫°o ${successCount} t√†i kho·∫£n m·ªõi. üö´ B·ªè qua ${skipCount} t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i.`);
    setSeverity("success");
  } catch (error) {
    console.error("‚ùå L·ªói x·ª≠ l√Ω:", error);
    setMessage("‚ùå C√≥ l·ªói x·∫£y ra.");
    setSeverity("error");
  } finally {
    setTimeout(() => {
      setProgress(0);
      setActionType("");
    }, 3000);
  }
};

// H√†m reset m·∫≠t kh·∫©u
export const resetClassUserPasswords = async ({
  db,
  password,
  namHoc,
  setActionType,
  setProgress,
  setMessage,
  setSeverity,
}) => {
  if (!password || password.trim() === "") {
    alert("‚ùå Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u h·ª£p l·ªá!");
    return;
  }

  if (!namHoc || namHoc === "UNKNOWN") {
    alert("‚ùå Kh√¥ng c√≥ nƒÉm h·ªçc h·ª£p l·ªá!");
    return;
  }

  try {
    setActionType("reset");

    const truongRef = doc(db, `CLASSLIST_${namHoc}`, "TRUONG");
    const truongSnap = await getDoc(truongRef);

    if (!truongSnap.exists()) {
      setMessage("‚ùå Kh√¥ng t√¨m th·∫•y danh s√°ch l·ªõp.");
      setSeverity("error");
      return;
    }

    const classList = truongSnap.data().list;
    if (!Array.isArray(classList)) {
      setMessage("‚ùå D·ªØ li·ªáu danh s√°ch l·ªõp kh√¥ng h·ª£p l·ªá.");
      setSeverity("error");
      return;
    }

    const BATCH_LIMIT = 500;
    let successCount = 0;
    let failList = [];

    for (let i = 0; i < classList.length; i += BATCH_LIMIT) {
      const batch = writeBatch(db);
      const chunk = classList.slice(i, i + BATCH_LIMIT);

      chunk.forEach(className => {
        const accountRef = doc(db, "ACCOUNT", className);
        batch.set(accountRef, {
          password: password,
          date: deleteField(),
        }, { merge: true });
      });

      try {
        await batch.commit();
        successCount += chunk.length;
      } catch (err) {
        console.error("‚ùå L·ªói ghi batch:", err);
        failList.push(...chunk);
      }

      const processed = Math.min(classList.length, i + chunk.length);
      setProgress(Math.round((processed / classList.length) * 100));
    }

    if (failList.length > 0) {
      setMessage(`‚ö†Ô∏è ƒê√£ reset ${successCount} t√†i kho·∫£n. ${failList.length} b·ªã l·ªói.`);
      setSeverity("warning");
    } else {
      setMessage(`‚úÖ ƒê√£ reset xong m·∫≠t kh·∫©u cho ${successCount} t√†i kho·∫£n (v√† x√≥a field "date").`);
      setSeverity("success");
    }
  } catch (error) {
    console.error("‚ùå L·ªói reset m·∫≠t kh·∫©u:", error);
    setMessage("‚ùå C√≥ l·ªói x·∫£y ra.");
    setSeverity("error");
  } finally {
    setTimeout(() => {
      setProgress(0);
      setActionType("");
    }, 3000);
  }
};
