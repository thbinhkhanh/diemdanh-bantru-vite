import { doc, getDoc, setDoc } from 'firebase/firestore';
import { db } from '../../firebase';

export const saveRegistrationChanges = async (
  students,
  namHoc,
  selectedClass,
  setClassData,
  classData
) => {
  const col = `DANHSACH_${namHoc}`;
  const classRef = doc(db, col, selectedClass);

  try {
    const docSnap = await getDoc(classRef);
    if (!docSnap.exists()) return;

    const data = docSnap.data();

    // üìå Map ID ‚Üí tr·∫°ng th√°i registered t·ª´ UI
    const regMap = new Map(
      students.map(s => [
        s.maDinhDanh || s.id,
        !!s.registered // ƒë·∫£m b·∫£o boolean
      ])
    );

    // üîÑ Duy·ªát v√† c·∫≠p nh·∫≠t t·∫•t c·∫£ field m·∫£ng h·ªçc sinh trong t√†i li·ªáu l·ªõp
    const newData = { ...data };
    Object.entries(data).forEach(([key, value]) => {
      if (!Array.isArray(value)) return;

      newData[key] = value.map(hs => {
        const reg = regMap.get(hs.maDinhDanh || hs.id);
        return reg !== undefined
          ? { ...hs, diemDanhBanTru: reg }
          : { ...hs };
      });
    });

    newData.updatedAt = new Date().toISOString();

    await setDoc(classRef, newData);

    // üß† Tr·ªôn l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i context ho·∫∑c state n·∫øu c·∫ßn
    const mergedList = students.map(s => ({
      ...s,
      hoVaTen: s.hoVaTen || s.hoTen || 'Kh√¥ng c√≥ t√™n',
      registered: !!s.registered
    }));

    // N·∫øu c·∫ßn c·∫≠p nh·∫≠t l·∫°i UI th√¨ b·ªè comment n√†y
    setClassData(selectedClass, mergedList);
  } catch (err) {
    console.error('‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu b√°n tr√∫:', err);
  }
};